{"remainingRequest":"/Users/pianistprogrammer/Desktop/peexoo/node_modules/babel-loader/lib/index.js!/Users/pianistprogrammer/Desktop/peexoo/node_modules/eslint-loader/index.js??ref--13-0!/Users/pianistprogrammer/Desktop/peexoo/src/assets/js/kenburns.js","dependencies":[{"path":"/Users/pianistprogrammer/Desktop/peexoo/src/assets/js/kenburns.js","mtime":1559716391470},{"path":"/Users/pianistprogrammer/Desktop/peexoo/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/pianistprogrammer/Desktop/peexoo/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/Users/pianistprogrammer/Desktop/peexoo/node_modules/eslint-loader/index.js","mtime":499162500000}],"contextDependencies":[],"result":["/*\n\n    Based on \n    Ken Burns effect JQuery plugin\n    Copyright (C) 2011 Will McGugan http://www.willmcgugan.com\n    \n    Modified by Oscar Chinellato - 2013 - SickDevelopers - http://www.sickdevelopers.com/blog\n\n    VERSION : 0.2\n\n    This program is free software: you can redistribute it and/or modify\n    it under the terms of the GNU Affero General Public License as\n    published by the Free Software Foundation, either version 3 of the\n    License, or (at your option) any later version.\n\n    This program is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n    GNU Affero General Public License for more details.\n\n    You should have received a copy of the GNU Affero General Public License\n    along with this program.  If not, see <http://www.gnu.org/licenses/>.\n*/\n;\n\n(function ($, undefined) {\n  $.fn.kenburned = function (options) {\n    var $canvas = $(this);\n    var ctx = this[0].getContext('2d');\n    var start_time = null;\n    var width = $canvas.width();\n    var height = $canvas.height();\n    var image_paths = options.images;\n    var zoom_level = 1 / (options.zoom || 2);\n    var clear_color = options.background_color || '#000000'; // time values\n\n    var display_time = options.display_time || 7000;\n    var fade_time = Math.min(display_time / 2, options.fade_time || 1000);\n    var solid_time = display_time - fade_time * 2;\n    var fade_ratio = fade_time - display_time;\n    var frames_per_second = options.frames_per_second || 30;\n    var frame_time = 1 / frames_per_second * 1000; // reference to the interval\n\n    var main_interval; // counter to check the first image loaded\n\n    var load_counter = 0; // array of images\n\n    var images = [];\n    $(image_paths).each(function (i, image_path) {\n      images.push({\n        path: image_path,\n        initialized: false,\n        loaded: false\n      });\n    });\n    /**\n     * Reset time values \n     * @return \n     */\n\n    function reset_time_values() {\n      start_time = null;\n      display_time = options.display_time || 7000;\n      fade_time = Math.min(display_time / 2, options.fade_time || 1000);\n      solid_time = display_time - fade_time * 2;\n      fade_ratio = fade_time - display_time;\n    }\n\n    function get_time() {\n      var d = new Date();\n      return d.getTime() - start_time;\n    }\n\n    function interpolate_point(x1, y1, x2, y2, i) {\n      // Finds a point between two other points\n      return {\n        x: x1 + (x2 - x1) * i,\n        y: y1 + (y2 - y1) * i\n      };\n    }\n\n    function interpolate_rect(r1, r2, i) {\n      // Blend one rect in to another\n      var p1 = interpolate_point(r1[0], r1[1], r2[0], r2[1], i);\n      var p2 = interpolate_point(r1[2], r1[3], r2[2], r2[3], i);\n      return [p1.x, p1.y, p2.x, p2.y];\n    }\n\n    function scale_rect(r, scale) {\n      // Scale a rect around its center\n      var w = r[2] - r[0];\n      var h = r[3] - r[1];\n      var cx = (r[2] + r[0]) / 2;\n      var cy = (r[3] + r[1]) / 2;\n      var scalew = w * scale;\n      var scaleh = h * scale;\n      return [cx - scalew / 2, cy - scaleh / 2, cx + scalew / 2, cy + scaleh / 2];\n    }\n\n    function fit(src_w, src_h, dst_w, dst_h) {\n      // Finds the best-fit rect so that the destination can be covered\n      // var src_a = src_w / src_h;\n      var dst_a = dst_w / dst_h;\n      var w = src_h * dst_a;\n      var h = src_h;\n\n      if (w > src_w) {\n        w = src_w;\n        h = src_w / dst_a;\n      }\n\n      var x = (src_w - w) / 2;\n      var y = (src_h - h) / 2;\n      return [x, y, x + w, y + h];\n    }\n    /**\n     * Image Preloading\n     * @param  int image_index  index in the images array fo the element to preload\n     * @param  function load_callback function to call on load complete\n     * @return object              image object\n     */\n\n\n    function get_image_info(image_index, load_callback) {\n      // Gets information structure for a given index\n      // Also loads the image asynchronously, if required     \n      var image_info = images[image_index];\n\n      if (!image_info.initialized) {\n        var image = new Image();\n        image_info.image = image;\n        image_info.loaded = false;\n\n        image.onload = function () {\n          image_info.loaded = true;\n          var iw = image.width;\n          var ih = image.height;\n          var r1 = fit(iw, ih, width, height);\n          var r2 = scale_rect(r1, zoom_level);\n          var align_x = Math.floor(Math.random() * 3) - 1;\n          var align_y = Math.floor(Math.random() * 3) - 1;\n          align_x /= 2;\n          align_y /= 2;\n          var x = r2[0];\n          r2[0] += x * align_x;\n          r2[2] += x * align_x;\n          var y = r2[1];\n          r2[1] += y * align_y;\n          r2[3] += y * align_y;\n\n          if (image_index % 2) {\n            image_info.r1 = r1;\n            image_info.r2 = r2;\n          } else {\n            image_info.r1 = r2;\n            image_info.r2 = r1;\n          }\n\n          if (load_callback) {\n            load_callback();\n          }\n        };\n\n        image_info.initialized = true;\n        image.src = image_info.path;\n      }\n\n      return image_info;\n    }\n    /**\n     * Renders a frame of the animation\n     * @param  {[type]} image_index [description]\n     * @param  {[type]} anim        [description]\n     * @param  {[type]} fade        [description]\n     * @return {[type]}             [description]\n     */\n\n\n    function render_image(image_index, anim, fade) {\n      // If rendering first image\n      if (++load_counter === 1) {\n        $('.preloader').fadeOut(500);\n        $canvas.hide().fadeIn(2000, function () {});\n      } // Renders a frame of the effect    \n\n\n      if (anim > 1) {\n        return;\n      }\n\n      var image_info = get_image_info(image_index);\n\n      if (image_info.loaded) {\n        var r = interpolate_rect(image_info.r1, image_info.r2, anim);\n        var transparency = Math.min(1, fade);\n\n        if (transparency > 0) {\n          ctx.save();\n          ctx.globalAlpha = Math.min(1, transparency);\n          ctx.drawImage(image_info.image, r[0], r[1], r[2] - r[0], r[3] - r[1], 0, 0, width, height);\n          ctx.restore();\n        }\n      }\n    }\n    /**\n     * Clear canvas\n     * @return {[type]} [description]\n     */\n\n\n    function clear() {\n      // Clear the canvas\n      ctx.save();\n      ctx.globalAlpha = 1;\n      ctx.fillStyle = clear_color;\n      ctx.fillRect(0, 0, ctx.canvas.width, ctx.canvas.height);\n      ctx.restore();\n    }\n    /**\n     * Updates animation\n     * @return {[type]} [description]\n     */\n\n\n    function update() {\n      // Render the next frame                                        \n      var update_time = get_time();\n      var top_frame = Math.floor(update_time / (display_time - fade_time));\n      var frame_start_time = top_frame * (display_time - fade_time);\n      var time_passed = update_time - frame_start_time;\n\n      if (time_passed < fade_time) {\n        var bottom_frame = top_frame - 1;\n        var bottom_frame_start_time = frame_start_time - display_time + fade_time;\n        var bottom_time_passed = update_time - bottom_frame_start_time;\n\n        if (update_time < fade_time) {\n          clear();\n        } else {\n          render_image(wrap_index(bottom_frame), bottom_time_passed / display_time, 1);\n        }\n      }\n\n      render_image(wrap_index(top_frame), time_passed / display_time, time_passed / fade_time);\n\n      if (options.post_render_callback) {\n        options.post_render_callback($canvas, ctx);\n      } // Pre-load the next image in the sequence, so it has loaded\n      // by the time we get to it\n\n\n      var preload_image = wrap_index(top_frame + 1);\n      get_image_info(preload_image);\n    }\n    /**\n     * Gets always a correct index\n     * @param  {[type]} i [description]\n     * @return {[type]}   [description]\n     */\n\n\n    function wrap_index(i) {\n      return (i + images.length) % images.length;\n    } // Pre-load the first two images then start a timer \n\n\n    get_image_info(0, function () {\n      start_time = get_time();\n      main_interval = setInterval(update, frame_time);\n    });\n    return {\n      utils: {\n        fadeOut: function fadeOut(callback) {\n          $canvas.fadeOut(callback);\n        },\n        fadeIn: function fadeIn() {\n          $canvas.fadeIn(1000);\n        }\n      },\n\n      /**\n       * Move to the next Image\n       * @return {[type]} [description]\n       */\n      nextSlide: function nextSlide() {\n        var currentFrame = Math.floor(get_time() / (display_time - fade_time));\n        var that = this;\n        this.utils.fadeOut(function () {\n          clearInterval(main_interval); // preload Images\n\n          get_image_info(wrap_index(currentFrame + 1)); // rearrange array\n\n          var newImages = [];\n\n          for (var i = images.length - 1; i > currentFrame; i--) {\n            newImages.push(images.pop());\n          }\n\n          newImages.reverse();\n          images = newImages.concat(images);\n          reset_time_values(); // restarts all over from the new image\n\n          start_time = get_time();\n          main_interval = setInterval(update, frame_time);\n          that.utils.fadeIn();\n        });\n      },\n\n      /**\n       * Move to the previous Image\n       * @return {[type]} [description]\n       */\n      prevSlide: function prevSlide() {\n        var currentFrame = Math.floor(get_time() / (display_time - fade_time));\n        var that = this;\n        this.utils.fadeOut(function () {\n          clearInterval(main_interval); // preload Images\n\n          get_image_info(wrap_index(currentFrame - 1)); // rearrange array\n\n          var newImages = [];\n\n          for (var i = 0; i < wrap_index(currentFrame - 1); i++) {\n            newImages.push(images.shift());\n          }\n\n          images = images.concat(newImages);\n          reset_time_values(); // restart all over from the new image\n\n          start_time = get_time();\n          main_interval = setInterval(update, frame_time);\n          that.utils.fadeIn();\n        });\n      }\n    };\n  };\n})(jQuery, undefined);",{"version":3,"sources":["/Users/pianistprogrammer/Desktop/peexoo/src/assets/js/kenburns.js"],"names":["$","undefined","fn","kenburned","options","$canvas","ctx","getContext","start_time","width","height","image_paths","images","zoom_level","zoom","clear_color","background_color","display_time","fade_time","Math","min","solid_time","fade_ratio","frames_per_second","frame_time","main_interval","load_counter","each","i","image_path","push","path","initialized","loaded","reset_time_values","get_time","d","Date","getTime","interpolate_point","x1","y1","x2","y2","x","y","interpolate_rect","r1","r2","p1","p2","scale_rect","r","scale","w","h","cx","cy","scalew","scaleh","fit","src_w","src_h","dst_w","dst_h","dst_a","get_image_info","image_index","load_callback","image_info","image","Image","onload","iw","ih","align_x","floor","random","align_y","src","render_image","anim","fade","fadeOut","hide","fadeIn","transparency","save","globalAlpha","drawImage","restore","clear","fillStyle","fillRect","canvas","update","update_time","top_frame","frame_start_time","time_passed","bottom_frame","bottom_frame_start_time","bottom_time_passed","wrap_index","post_render_callback","preload_image","length","setInterval","utils","callback","nextSlide","currentFrame","that","clearInterval","newImages","pop","reverse","concat","prevSlide","shift","jQuery"],"mappings":"AAAA;;;;;;;;;;;;;;;;;;;;;;;AAwBA;;AAAC,CAAC,UAASA,CAAT,EAAYC,SAAZ,EAAsB;AAEpBD,EAAAA,CAAC,CAACE,EAAF,CAAKC,SAAL,GAAiB,UAASC,OAAT,EAAkB;AAE/B,QAAIC,OAAO,GAAGL,CAAC,CAAC,IAAD,CAAf;AACA,QAAIM,GAAG,GAAG,KAAK,CAAL,EAAQC,UAAR,CAAmB,IAAnB,CAAV;AACA,QAAIC,UAAU,GAAG,IAAjB;AACA,QAAIC,KAAK,GAAGJ,OAAO,CAACI,KAAR,EAAZ;AACA,QAAIC,MAAM,GAAGL,OAAO,CAACK,MAAR,EAAb;AAEA,QAAIC,WAAW,GAAGP,OAAO,CAACQ,MAA1B;AACA,QAAIC,UAAU,GAAG,KAAKT,OAAO,CAACU,IAAR,IAAgB,CAArB,CAAjB;AACA,QAAIC,WAAW,GAAGX,OAAO,CAACY,gBAAR,IAA4B,SAA9C,CAV+B,CAY/B;;AACA,QAAIC,YAAY,GAAGb,OAAO,CAACa,YAAR,IAAwB,IAA3C;AACA,QAAIC,SAAS,GAAGC,IAAI,CAACC,GAAL,CAASH,YAAY,GAAG,CAAxB,EAA2Bb,OAAO,CAACc,SAAR,IAAqB,IAAhD,CAAhB;AACA,QAAIG,UAAU,GAAGJ,YAAY,GAAIC,SAAS,GAAG,CAA7C;AACA,QAAII,UAAU,GAAGJ,SAAS,GAAGD,YAA7B;AACA,QAAIM,iBAAiB,GAAGnB,OAAO,CAACmB,iBAAR,IAA6B,EAArD;AACA,QAAIC,UAAU,GAAI,IAAID,iBAAL,GAA0B,IAA3C,CAlB+B,CAoB/B;;AACA,QAAIE,aAAJ,CArB+B,CAuB/B;;AACA,QAAIC,YAAY,GAAG,CAAnB,CAxB+B,CA0B/B;;AACA,QAAId,MAAM,GAAG,EAAb;AACAZ,IAAAA,CAAC,CAACW,WAAD,CAAD,CAAegB,IAAf,CAAoB,UAASC,CAAT,EAAYC,UAAZ,EAAuB;AACvCjB,MAAAA,MAAM,CAACkB,IAAP,CAAY;AACRC,QAAAA,IAAI,EAACF,UADG;AAERG,QAAAA,WAAW,EAAC,KAFJ;AAGRC,QAAAA,MAAM,EAAC;AAHC,OAAZ;AAKH,KAND;AAQA;;;;;AAIA,aAASC,iBAAT,GAA6B;AACzB1B,MAAAA,UAAU,GAAG,IAAb;AAEAS,MAAAA,YAAY,GAAGb,OAAO,CAACa,YAAR,IAAwB,IAAvC;AACAC,MAAAA,SAAS,GAAGC,IAAI,CAACC,GAAL,CAASH,YAAY,GAAG,CAAxB,EAA2Bb,OAAO,CAACc,SAAR,IAAqB,IAAhD,CAAZ;AACAG,MAAAA,UAAU,GAAGJ,YAAY,GAAIC,SAAS,GAAG,CAAzC;AACAI,MAAAA,UAAU,GAAGJ,SAAS,GAAGD,YAAzB;AACH;;AAGD,aAASkB,QAAT,GAAoB;AAChB,UAAIC,CAAC,GAAG,IAAIC,IAAJ,EAAR;AACA,aAAOD,CAAC,CAACE,OAAF,KAAc9B,UAArB;AACH;;AAED,aAAS+B,iBAAT,CAA2BC,EAA3B,EAA+BC,EAA/B,EAAmCC,EAAnC,EAAuCC,EAAvC,EAA2Cf,CAA3C,EAA8C;AAC1C;AACA,aAAQ;AAACgB,QAAAA,CAAC,EAAEJ,EAAE,GAAG,CAACE,EAAE,GAAGF,EAAN,IAAYZ,CAArB;AAAwBiB,QAAAA,CAAC,EAAEJ,EAAE,GAAG,CAACE,EAAE,GAAGF,EAAN,IAAYb;AAA5C,OAAR;AACH;;AAED,aAASkB,gBAAT,CAA0BC,EAA1B,EAA8BC,EAA9B,EAAkCpB,CAAlC,EAAqC;AACjC;AACA,UAAIqB,EAAE,GAAGV,iBAAiB,CAACQ,EAAE,CAAC,CAAD,CAAH,EAAQA,EAAE,CAAC,CAAD,CAAV,EAAeC,EAAE,CAAC,CAAD,CAAjB,EAAsBA,EAAE,CAAC,CAAD,CAAxB,EAA6BpB,CAA7B,CAA1B;AACA,UAAIsB,EAAE,GAAGX,iBAAiB,CAACQ,EAAE,CAAC,CAAD,CAAH,EAAQA,EAAE,CAAC,CAAD,CAAV,EAAeC,EAAE,CAAC,CAAD,CAAjB,EAAsBA,EAAE,CAAC,CAAD,CAAxB,EAA6BpB,CAA7B,CAA1B;AACA,aAAO,CAACqB,EAAE,CAACL,CAAJ,EAAOK,EAAE,CAACJ,CAAV,EAAaK,EAAE,CAACN,CAAhB,EAAmBM,EAAE,CAACL,CAAtB,CAAP;AACH;;AAED,aAASM,UAAT,CAAoBC,CAApB,EAAuBC,KAAvB,EAA8B;AAC1B;AACA,UAAIC,CAAC,GAAGF,CAAC,CAAC,CAAD,CAAD,GAAOA,CAAC,CAAC,CAAD,CAAhB;AACA,UAAIG,CAAC,GAAGH,CAAC,CAAC,CAAD,CAAD,GAAOA,CAAC,CAAC,CAAD,CAAhB;AACA,UAAII,EAAE,GAAG,CAACJ,CAAC,CAAC,CAAD,CAAD,GAAOA,CAAC,CAAC,CAAD,CAAT,IAAgB,CAAzB;AACA,UAAIK,EAAE,GAAG,CAACL,CAAC,CAAC,CAAD,CAAD,GAAOA,CAAC,CAAC,CAAD,CAAT,IAAgB,CAAzB;AACA,UAAIM,MAAM,GAAGJ,CAAC,GAAGD,KAAjB;AACA,UAAIM,MAAM,GAAGJ,CAAC,GAAGF,KAAjB;AACA,aAAO,CAACG,EAAE,GAAGE,MAAM,GAAC,CAAb,EACCD,EAAE,GAAGE,MAAM,GAAC,CADb,EAECH,EAAE,GAAGE,MAAM,GAAC,CAFb,EAGCD,EAAE,GAAGE,MAAM,GAAC,CAHb,CAAP;AAIH;;AAED,aAASC,GAAT,CAAaC,KAAb,EAAoBC,KAApB,EAA2BC,KAA3B,EAAkCC,KAAlC,EAAyC;AACrC;AACA;AACA,UAAIC,KAAK,GAAGF,KAAK,GAAGC,KAApB;AACA,UAAIV,CAAC,GAAGQ,KAAK,GAAGG,KAAhB;AACA,UAAIV,CAAC,GAAGO,KAAR;;AACA,UAAIR,CAAC,GAAGO,KAAR,EACA;AACIP,QAAAA,CAAC,GAAGO,KAAJ;AACAN,QAAAA,CAAC,GAAGM,KAAK,GAAGI,KAAZ;AACH;;AACD,UAAIrB,CAAC,GAAG,CAACiB,KAAK,GAAGP,CAAT,IAAc,CAAtB;AACA,UAAIT,CAAC,GAAG,CAACiB,KAAK,GAAGP,CAAT,IAAc,CAAtB;AACA,aAAO,CAACX,CAAD,EAAIC,CAAJ,EAAOD,CAAC,GAACU,CAAT,EAAYT,CAAC,GAACU,CAAd,CAAP;AACH;AAED;;;;;;;;AAMA,aAASW,cAAT,CAAwBC,WAAxB,EAAqCC,aAArC,EAAoD;AAChD;AACA;AACA,UAAIC,UAAU,GAAGzD,MAAM,CAACuD,WAAD,CAAvB;;AACA,UAAI,CAACE,UAAU,CAACrC,WAAhB,EAA6B;AACzB,YAAIsC,KAAK,GAAG,IAAIC,KAAJ,EAAZ;AACAF,QAAAA,UAAU,CAACC,KAAX,GAAmBA,KAAnB;AACAD,QAAAA,UAAU,CAACpC,MAAX,GAAoB,KAApB;;AACAqC,QAAAA,KAAK,CAACE,MAAN,GAAe,YAAU;AACrBH,UAAAA,UAAU,CAACpC,MAAX,GAAoB,IAApB;AACA,cAAIwC,EAAE,GAAGH,KAAK,CAAC7D,KAAf;AACA,cAAIiE,EAAE,GAAGJ,KAAK,CAAC5D,MAAf;AAEA,cAAIqC,EAAE,GAAGa,GAAG,CAACa,EAAD,EAAKC,EAAL,EAASjE,KAAT,EAAgBC,MAAhB,CAAZ;AACA,cAAIsC,EAAE,GAAGG,UAAU,CAACJ,EAAD,EAAKlC,UAAL,CAAnB;AAEA,cAAI8D,OAAO,GAAGxD,IAAI,CAACyD,KAAL,CAAWzD,IAAI,CAAC0D,MAAL,KAAgB,CAA3B,IAAgC,CAA9C;AACA,cAAIC,OAAO,GAAG3D,IAAI,CAACyD,KAAL,CAAWzD,IAAI,CAAC0D,MAAL,KAAgB,CAA3B,IAAgC,CAA9C;AACAF,UAAAA,OAAO,IAAI,CAAX;AACAG,UAAAA,OAAO,IAAI,CAAX;AAEA,cAAIlC,CAAC,GAAGI,EAAE,CAAC,CAAD,CAAV;AACAA,UAAAA,EAAE,CAAC,CAAD,CAAF,IAASJ,CAAC,GAAG+B,OAAb;AACA3B,UAAAA,EAAE,CAAC,CAAD,CAAF,IAASJ,CAAC,GAAG+B,OAAb;AAEA,cAAI9B,CAAC,GAAGG,EAAE,CAAC,CAAD,CAAV;AACAA,UAAAA,EAAE,CAAC,CAAD,CAAF,IAASH,CAAC,GAAGiC,OAAb;AACA9B,UAAAA,EAAE,CAAC,CAAD,CAAF,IAASH,CAAC,GAAGiC,OAAb;;AAEA,cAAIX,WAAW,GAAG,CAAlB,EAAqB;AACjBE,YAAAA,UAAU,CAACtB,EAAX,GAAgBA,EAAhB;AACAsB,YAAAA,UAAU,CAACrB,EAAX,GAAgBA,EAAhB;AACH,WAHD,MAIK;AACDqB,YAAAA,UAAU,CAACtB,EAAX,GAAgBC,EAAhB;AACAqB,YAAAA,UAAU,CAACrB,EAAX,GAAgBD,EAAhB;AACH;;AAED,cAAGqB,aAAH,EAAkB;AACdA,YAAAA,aAAa;AAChB;AAEJ,SAlCD;;AAmCAC,QAAAA,UAAU,CAACrC,WAAX,GAAyB,IAAzB;AACAsC,QAAAA,KAAK,CAACS,GAAN,GAAYV,UAAU,CAACtC,IAAvB;AACH;;AAED,aAAOsC,UAAP;AACH;AAED;;;;;;;;;AAOA,aAASW,YAAT,CAAsBb,WAAtB,EAAmCc,IAAnC,EAAyCC,IAAzC,EAA+C;AAE3C;AACA,UAAG,EAAExD,YAAF,KAAmB,CAAtB,EAAyB;AACrB1B,QAAAA,CAAC,CAAC,YAAD,CAAD,CAAgBmF,OAAhB,CAAwB,GAAxB;AACA9E,QAAAA,OAAO,CAAC+E,IAAR,GAAeC,MAAf,CAAsB,IAAtB,EAA4B,YAAW,CAAE,CAAzC;AACH,OAN0C,CAQ3C;;;AACA,UAAIJ,IAAI,GAAG,CAAX,EAAc;AACV;AACH;;AACD,UAAIZ,UAAU,GAAGH,cAAc,CAACC,WAAD,CAA/B;;AACA,UAAIE,UAAU,CAACpC,MAAf,EAAuB;AACnB,YAAImB,CAAC,GAAGN,gBAAgB,CAACuB,UAAU,CAACtB,EAAZ,EAAgBsB,UAAU,CAACrB,EAA3B,EAA+BiC,IAA/B,CAAxB;AACA,YAAIK,YAAY,GAAGnE,IAAI,CAACC,GAAL,CAAS,CAAT,EAAY8D,IAAZ,CAAnB;;AAEA,YAAII,YAAY,GAAG,CAAnB,EAAsB;AAClBhF,UAAAA,GAAG,CAACiF,IAAJ;AACAjF,UAAAA,GAAG,CAACkF,WAAJ,GAAkBrE,IAAI,CAACC,GAAL,CAAS,CAAT,EAAYkE,YAAZ,CAAlB;AACAhF,UAAAA,GAAG,CAACmF,SAAJ,CAAcpB,UAAU,CAACC,KAAzB,EAAgClB,CAAC,CAAC,CAAD,CAAjC,EAAsCA,CAAC,CAAC,CAAD,CAAvC,EAA4CA,CAAC,CAAC,CAAD,CAAD,GAAOA,CAAC,CAAC,CAAD,CAApD,EAAyDA,CAAC,CAAC,CAAD,CAAD,GAAOA,CAAC,CAAC,CAAD,CAAjE,EAAsE,CAAtE,EAAyE,CAAzE,EAA4E3C,KAA5E,EAAmFC,MAAnF;AACAJ,UAAAA,GAAG,CAACoF,OAAJ;AACH;AACJ;AACJ;AAED;;;;;;AAIA,aAASC,KAAT,GAAiB;AACb;AACArF,MAAAA,GAAG,CAACiF,IAAJ;AACAjF,MAAAA,GAAG,CAACkF,WAAJ,GAAkB,CAAlB;AACAlF,MAAAA,GAAG,CAACsF,SAAJ,GAAgB7E,WAAhB;AACAT,MAAAA,GAAG,CAACuF,QAAJ,CAAa,CAAb,EAAgB,CAAhB,EAAmBvF,GAAG,CAACwF,MAAJ,CAAWrF,KAA9B,EAAqCH,GAAG,CAACwF,MAAJ,CAAWpF,MAAhD;AACAJ,MAAAA,GAAG,CAACoF,OAAJ;AACH;AAED;;;;;;AAIA,aAASK,MAAT,GAAkB;AACd;AACA,UAAIC,WAAW,GAAG7D,QAAQ,EAA1B;AAEA,UAAI8D,SAAS,GAAG9E,IAAI,CAACyD,KAAL,CAAWoB,WAAW,IAAI/E,YAAY,GAAGC,SAAnB,CAAtB,CAAhB;AACA,UAAIgF,gBAAgB,GAAGD,SAAS,IAAIhF,YAAY,GAAGC,SAAnB,CAAhC;AACA,UAAIiF,WAAW,GAAGH,WAAW,GAAGE,gBAAhC;;AAEA,UAAIC,WAAW,GAAGjF,SAAlB,EACA;AACI,YAAIkF,YAAY,GAAGH,SAAS,GAAG,CAA/B;AACA,YAAII,uBAAuB,GAAGH,gBAAgB,GAAGjF,YAAnB,GAAkCC,SAAhE;AACA,YAAIoF,kBAAkB,GAAGN,WAAW,GAAGK,uBAAvC;;AACA,YAAIL,WAAW,GAAG9E,SAAlB,EAA6B;AACzByE,UAAAA,KAAK;AACR,SAFD,MAEO;AACHX,UAAAA,YAAY,CAACuB,UAAU,CAACH,YAAD,CAAX,EAA2BE,kBAAkB,GAAGrF,YAAhD,EAA8D,CAA9D,CAAZ;AACH;AACJ;;AAED+D,MAAAA,YAAY,CAACuB,UAAU,CAACN,SAAD,CAAX,EAAwBE,WAAW,GAAGlF,YAAtC,EAAoDkF,WAAW,GAAGjF,SAAlE,CAAZ;;AAEA,UAAId,OAAO,CAACoG,oBAAZ,EAAkC;AAC9BpG,QAAAA,OAAO,CAACoG,oBAAR,CAA6BnG,OAA7B,EAAsCC,GAAtC;AACH,OAxBa,CA0Bd;AACA;;;AACA,UAAImG,aAAa,GAAGF,UAAU,CAACN,SAAS,GAAG,CAAb,CAA9B;AACA/B,MAAAA,cAAc,CAACuC,aAAD,CAAd;AACH;AAED;;;;;;;AAKA,aAASF,UAAT,CAAoB3E,CAApB,EAAuB;AACnB,aAAO,CAACA,CAAC,GAAGhB,MAAM,CAAC8F,MAAZ,IAAsB9F,MAAM,CAAC8F,MAApC;AACH,KAlP8B,CAoP/B;;;AACAxC,IAAAA,cAAc,CAAC,CAAD,EAAI,YAAU;AACxB1D,MAAAA,UAAU,GAAG2B,QAAQ,EAArB;AACAV,MAAAA,aAAa,GAAGkF,WAAW,CAACZ,MAAD,EAASvE,UAAT,CAA3B;AACH,KAHa,CAAd;AAKA,WAAO;AAEHoF,MAAAA,KAAK,EAAG;AACJzB,QAAAA,OAAO,EAAE,iBAAS0B,QAAT,EAAmB;AACxBxG,UAAAA,OAAO,CAAC8E,OAAR,CAAgB0B,QAAhB;AACH,SAHG;AAIJxB,QAAAA,MAAM,EAAG,kBAAW;AAChBhF,UAAAA,OAAO,CAACgF,MAAR,CAAe,IAAf;AACH;AANG,OAFL;;AAWH;;;;AAIAyB,MAAAA,SAAS,EAAG,qBAAW;AACnB,YAAIC,YAAY,GAAG5F,IAAI,CAACyD,KAAL,CAAWzC,QAAQ,MAAMlB,YAAY,GAAGC,SAArB,CAAnB,CAAnB;AACA,YAAI8F,IAAI,GAAG,IAAX;AAEA,aAAKJ,KAAL,CAAWzB,OAAX,CAAmB,YAAW;AAC1B8B,UAAAA,aAAa,CAACxF,aAAD,CAAb,CAD0B,CAG1B;;AACAyC,UAAAA,cAAc,CAACqC,UAAU,CAACQ,YAAY,GAAC,CAAd,CAAX,CAAd,CAJ0B,CAM1B;;AACA,cAAIG,SAAS,GAAG,EAAhB;;AACA,eAAK,IAAItF,CAAC,GAAGhB,MAAM,CAAC8F,MAAP,GAAe,CAA5B,EAA+B9E,CAAC,GAAGmF,YAAnC,EAAiDnF,CAAC,EAAlD,EAAuD;AACnDsF,YAAAA,SAAS,CAACpF,IAAV,CAAelB,MAAM,CAACuG,GAAP,EAAf;AACH;;AACDD,UAAAA,SAAS,CAACE,OAAV;AACAxG,UAAAA,MAAM,GAAGsG,SAAS,CAACG,MAAV,CAAiBzG,MAAjB,CAAT;AAEAsB,UAAAA,iBAAiB,GAdS,CAgB1B;;AACA1B,UAAAA,UAAU,GAAG2B,QAAQ,EAArB;AACAV,UAAAA,aAAa,GAAGkF,WAAW,CAACZ,MAAD,EAASvE,UAAT,CAA3B;AAEAwF,UAAAA,IAAI,CAACJ,KAAL,CAAWvB,MAAX;AAEH,SAtBD;AAwBH,OA3CE;;AA8CH;;;;AAIAiC,MAAAA,SAAS,EAAG,qBAAW;AACnB,YAAIP,YAAY,GAAG5F,IAAI,CAACyD,KAAL,CAAWzC,QAAQ,MAAMlB,YAAY,GAAGC,SAArB,CAAnB,CAAnB;AACA,YAAI8F,IAAI,GAAG,IAAX;AAEA,aAAKJ,KAAL,CAAWzB,OAAX,CAAmB,YAAW;AAC1B8B,UAAAA,aAAa,CAACxF,aAAD,CAAb,CAD0B,CAG1B;;AACAyC,UAAAA,cAAc,CAACqC,UAAU,CAACQ,YAAY,GAAC,CAAd,CAAX,CAAd,CAJ0B,CAM1B;;AACA,cAAIG,SAAS,GAAG,EAAhB;;AACA,eAAK,IAAItF,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG2E,UAAU,CAACQ,YAAY,GAAC,CAAd,CAA9B,EAAiDnF,CAAC,EAAlD,EAAuD;AACnDsF,YAAAA,SAAS,CAACpF,IAAV,CAAelB,MAAM,CAAC2G,KAAP,EAAf;AACH;;AACD3G,UAAAA,MAAM,GAAGA,MAAM,CAACyG,MAAP,CAAcH,SAAd,CAAT;AAEAhF,UAAAA,iBAAiB,GAbS,CAe1B;;AACA1B,UAAAA,UAAU,GAAG2B,QAAQ,EAArB;AACAV,UAAAA,aAAa,GAAGkF,WAAW,CAACZ,MAAD,EAASvE,UAAT,CAA3B;AAEAwF,UAAAA,IAAI,CAACJ,KAAL,CAAWvB,MAAX;AAEH,SArBD;AAsBH;AA5EE,KAAP;AA+EH,GAzUD;AA2UH,CA7UA,EA6UGmC,MA7UH,EA6UWvH,SA7UX","sourcesContent":["/*\n\n    Based on \n    Ken Burns effect JQuery plugin\n    Copyright (C) 2011 Will McGugan http://www.willmcgugan.com\n    \n    Modified by Oscar Chinellato - 2013 - SickDevelopers - http://www.sickdevelopers.com/blog\n\n    VERSION : 0.2\n\n    This program is free software: you can redistribute it and/or modify\n    it under the terms of the GNU Affero General Public License as\n    published by the Free Software Foundation, either version 3 of the\n    License, or (at your option) any later version.\n\n    This program is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n    GNU Affero General Public License for more details.\n\n    You should have received a copy of the GNU Affero General Public License\n    along with this program.  If not, see <http://www.gnu.org/licenses/>.\n*/\n\n;(function($, undefined){\n\n    $.fn.kenburned = function(options) {\n\n        var $canvas = $(this);\n        var ctx = this[0].getContext('2d');\n        var start_time = null;\n        var width = $canvas.width();\n        var height = $canvas.height();\n\n        var image_paths = options.images;\n        var zoom_level = 1 / (options.zoom || 2);\n        var clear_color = options.background_color || '#000000';\n\n        // time values\n        var display_time = options.display_time || 7000;\n        var fade_time = Math.min(display_time / 2, options.fade_time || 1000);\n        var solid_time = display_time - (fade_time * 2);\n        var fade_ratio = fade_time - display_time;\n        var frames_per_second = options.frames_per_second || 30;\n        var frame_time = (1 / frames_per_second) * 1000;\n\n        // reference to the interval\n        var main_interval;\n\n        // counter to check the first image loaded\n        var load_counter = 0;\n\n        // array of images\n        var images = [];\n        $(image_paths).each(function(i, image_path){\n            images.push({\n                path:image_path,\n                initialized:false,\n                loaded:false\n            });\n        });\n\n        /**\n         * Reset time values \n         * @return \n         */\n        function reset_time_values() {\n            start_time = null;\n\n            display_time = options.display_time || 7000;\n            fade_time = Math.min(display_time / 2, options.fade_time || 1000);\n            solid_time = display_time - (fade_time * 2);\n            fade_ratio = fade_time - display_time;\n        }\n\n\n        function get_time() {\n            var d = new Date();\n            return d.getTime() - start_time;\n        }\n\n        function interpolate_point(x1, y1, x2, y2, i) {\n            // Finds a point between two other points\n            return  {x: x1 + (x2 - x1) * i, y: y1 + (y2 - y1) * i};\n        }\n\n        function interpolate_rect(r1, r2, i) {\n            // Blend one rect in to another\n            var p1 = interpolate_point(r1[0], r1[1], r2[0], r2[1], i);\n            var p2 = interpolate_point(r1[2], r1[3], r2[2], r2[3], i);\n            return [p1.x, p1.y, p2.x, p2.y];\n        }\n\n        function scale_rect(r, scale) {\n            // Scale a rect around its center\n            var w = r[2] - r[0];\n            var h = r[3] - r[1];\n            var cx = (r[2] + r[0]) / 2;\n            var cy = (r[3] + r[1]) / 2;\n            var scalew = w * scale;\n            var scaleh = h * scale;\n            return [cx - scalew/2,\n                    cy - scaleh/2,\n                    cx + scalew/2,\n                    cy + scaleh/2];\n        }\n\n        function fit(src_w, src_h, dst_w, dst_h) {\n            // Finds the best-fit rect so that the destination can be covered\n            // var src_a = src_w / src_h;\n            var dst_a = dst_w / dst_h;\n            var w = src_h * dst_a;\n            var h = src_h;\n            if (w > src_w)\n            {\n                w = src_w;\n                h = src_w / dst_a;\n            }\n            var x = (src_w - w) / 2;\n            var y = (src_h - h) / 2;\n            return [x, y, x+w, y+h];\n        }\n\n        /**\n         * Image Preloading\n         * @param  int image_index  index in the images array fo the element to preload\n         * @param  function load_callback function to call on load complete\n         * @return object              image object\n         */\n        function get_image_info(image_index, load_callback) {\n            // Gets information structure for a given index\n            // Also loads the image asynchronously, if required     \n            var image_info = images[image_index];\n            if (!image_info.initialized) {\n                var image = new Image();\n                image_info.image = image;\n                image_info.loaded = false;\n                image.onload = function(){\n                    image_info.loaded = true;\n                    var iw = image.width;\n                    var ih = image.height;\n\n                    var r1 = fit(iw, ih, width, height);\n                    var r2 = scale_rect(r1, zoom_level);\n\n                    var align_x = Math.floor(Math.random() * 3) - 1;\n                    var align_y = Math.floor(Math.random() * 3) - 1;\n                    align_x /= 2;\n                    align_y /= 2;\n\n                    var x = r2[0];\n                    r2[0] += x * align_x;\n                    r2[2] += x * align_x;\n\n                    var y = r2[1];\n                    r2[1] += y * align_y;\n                    r2[3] += y * align_y;\n\n                    if (image_index % 2) {\n                        image_info.r1 = r1;\n                        image_info.r2 = r2;\n                    }\n                    else {\n                        image_info.r1 = r2;\n                        image_info.r2 = r1;\n                    }\n\n                    if(load_callback) {\n                        load_callback();\n                    }\n\n                };\n                image_info.initialized = true;\n                image.src = image_info.path;\n            }\n\n            return image_info;\n        }\n\n        /**\n         * Renders a frame of the animation\n         * @param  {[type]} image_index [description]\n         * @param  {[type]} anim        [description]\n         * @param  {[type]} fade        [description]\n         * @return {[type]}             [description]\n         */\n        function render_image(image_index, anim, fade) {\n\n            // If rendering first image\n            if(++load_counter === 1) {\n                $('.preloader').fadeOut(500);\n                $canvas.hide().fadeIn(2000, function() {});\n            }\n\n            // Renders a frame of the effect    \n            if (anim > 1) {\n                return;\n            }\n            var image_info = get_image_info(image_index);\n            if (image_info.loaded) {\n                var r = interpolate_rect(image_info.r1, image_info.r2, anim);\n                var transparency = Math.min(1, fade);\n\n                if (transparency > 0) {\n                    ctx.save();\n                    ctx.globalAlpha = Math.min(1, transparency);\n                    ctx.drawImage(image_info.image, r[0], r[1], r[2] - r[0], r[3] - r[1], 0, 0, width, height);\n                    ctx.restore();\n                }\n            }\n        }\n\n        /**\n         * Clear canvas\n         * @return {[type]} [description]\n         */\n        function clear() {\n            // Clear the canvas\n            ctx.save();\n            ctx.globalAlpha = 1;\n            ctx.fillStyle = clear_color;\n            ctx.fillRect(0, 0, ctx.canvas.width, ctx.canvas.height);\n            ctx.restore();\n        }\n\n        /**\n         * Updates animation\n         * @return {[type]} [description]\n         */\n        function update() {\n            // Render the next frame                                        \n            var update_time = get_time();\n\n            var top_frame = Math.floor(update_time / (display_time - fade_time));\n            var frame_start_time = top_frame * (display_time - fade_time);\n            var time_passed = update_time - frame_start_time;\n\n            if (time_passed < fade_time)\n            {\n                var bottom_frame = top_frame - 1;\n                var bottom_frame_start_time = frame_start_time - display_time + fade_time;\n                var bottom_time_passed = update_time - bottom_frame_start_time;\n                if (update_time < fade_time) {\n                    clear();\n                } else {\n                    render_image(wrap_index(bottom_frame), bottom_time_passed / display_time, 1);\n                }\n            }\n\n            render_image(wrap_index(top_frame), time_passed / display_time, time_passed / fade_time);\n\n            if (options.post_render_callback) {\n                options.post_render_callback($canvas, ctx);\n            }\n\n            // Pre-load the next image in the sequence, so it has loaded\n            // by the time we get to it\n            var preload_image = wrap_index(top_frame + 1);\n            get_image_info(preload_image);\n        }\n\n        /**\n         * Gets always a correct index\n         * @param  {[type]} i [description]\n         * @return {[type]}   [description]\n         */\n        function wrap_index(i) {\n            return (i + images.length) % images.length;\n        }\n\n        // Pre-load the first two images then start a timer \n        get_image_info(0, function(){\n            start_time = get_time();\n            main_interval = setInterval(update, frame_time);\n        });\n\n        return {\n\n            utils : {\n                fadeOut: function(callback) {\n                    $canvas.fadeOut(callback);\n                },\n                fadeIn : function() {\n                    $canvas.fadeIn(1000);\n                }\n            },\n\n            /**\n             * Move to the next Image\n             * @return {[type]} [description]\n             */\n            nextSlide : function() {\n                var currentFrame = Math.floor(get_time() / (display_time - fade_time));\n                var that = this;\n\n                this.utils.fadeOut(function() {\n                    clearInterval(main_interval);\n\n                    // preload Images\n                    get_image_info(wrap_index(currentFrame+1));\n\n                    // rearrange array\n                    var newImages = [];\n                    for( var i = images.length -1; i > currentFrame; i-- ) {\n                        newImages.push(images.pop());\n                    }\n                    newImages.reverse();\n                    images = newImages.concat(images);\n\n                    reset_time_values();\n\n                    // restarts all over from the new image\n                    start_time = get_time();\n                    main_interval = setInterval(update, frame_time);\n\n                    that.utils.fadeIn();\n\n                });\n\n            },\n\n\n            /**\n             * Move to the previous Image\n             * @return {[type]} [description]\n             */\n            prevSlide : function() {\n                var currentFrame = Math.floor(get_time() / (display_time - fade_time));\n                var that = this;\n\n                this.utils.fadeOut(function() {\n                    clearInterval(main_interval);\n\n                    // preload Images\n                    get_image_info(wrap_index(currentFrame-1));\n\n                    // rearrange array\n                    var newImages = [];\n                    for( var i = 0; i < wrap_index(currentFrame-1) ; i++ ) {\n                        newImages.push(images.shift());\n                    }\n                    images = images.concat(newImages);\n\n                    reset_time_values();\n\n                    // restart all over from the new image\n                    start_time = get_time();\n                    main_interval = setInterval(update, frame_time);\n\n                    that.utils.fadeIn();\n\n                });\n            }\n        };\n\n    };\n\n})( jQuery, undefined );\n"]}]}