{"remainingRequest":"/Users/pianistprogrammer/Desktop/peexoo/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/pianistprogrammer/Desktop/peexoo/node_modules/mdbvue/src/components/Advanced/Tooltip.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/pianistprogrammer/Desktop/peexoo/node_modules/mdbvue/src/components/Advanced/Tooltip.vue","mtime":499162500000},{"path":"/Users/pianistprogrammer/Desktop/peexoo/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/pianistprogrammer/Desktop/peexoo/node_modules/thread-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/pianistprogrammer/Desktop/peexoo/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/Users/pianistprogrammer/Desktop/peexoo/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/pianistprogrammer/Desktop/peexoo/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport Popper from 'popper.js';\n\nconst on = function(element, event, handler) {\n  if (element && event && handler) {\n    document.addEventListener ? element.addEventListener(event, handler, false) : element.attachEvent('on' + event, handler);\n  }\n};\n\nconst off = function(element, event, handler) {\n  if (element && event) {\n    document.removeEventListener ? element.removeEventListener(event, handler, false) : element.detachEvent('on' + event, handler);\n  }\n};\n\nconst Tooltip = {\n  props: {\n    trigger: {\n      type: String,\n      default: 'hover',\n      validator: value => ['click', 'hover'].indexOf(value) > -1\n    },\n    delayOnMouseOut: {\n      type: Number,\n      default: 10,\n    },\n    disabled: {\n      type: Boolean,\n      default: false\n    },\n    content: String,\n    enterActiveClass: String,\n    leaveActiveClass: String,\n    boundariesSelector: String,\n    reference: {},\n    forceShow: {\n      type: Boolean,\n      default: false\n    },\n    appendToBody: {\n      type: Boolean,\n      default: false\n    },\n    visibleArrow: {\n      type: Boolean,\n      default: true\n    },\n    transition: {\n      type: String,\n      default: ''\n    },\n    options: {\n      type: Object,\n      default() {\n        return {};\n      }\n    },\n  },\n\n  data() {\n    return {\n      referenceElm: null,\n      popperJS: null,\n      showPopper: false,\n      currentPlacement: '',\n      popperOptions: {\n        placement: 'bottom',\n        gpuAcceleration: false\n      }\n    };\n  },\n\n  watch: {\n    showPopper(value) {\n      if (value) {\n        this.$emit('show');\n        this.updatePopper();\n      } else {\n        this.$emit('hide');\n      }\n    },\n\n    forceShow: {\n      handler(value) {\n        this[value ? 'doShow' : 'doClose']();\n      },\n      immediate: true\n    }\n  },\n\n  created() {\n    this.appendedArrow = false;\n    this.appendedToBody = false;\n    this.popperOptions = Object.assign(this.popperOptions, this.options);\n  },\n\n  mounted() {\n    this.referenceElm = this.reference || this.$slots.reference[0].elm;\n    this.tooltip =  this.$refs.tooltip || this.$slots.default[0].elm;\n\n    switch (this.trigger) {\n      case 'click':\n        on(this.referenceElm, 'click', this.doToggle);\n        on(document, 'click', this.handleDocumentClick);\n        break;\n      case 'hover':\n        on(this.referenceElm, 'mouseover', this.onMouseOver);\n        on(this.tooltip, 'mouseover', this.onMouseOver);\n        on(this.referenceElm, 'mouseout', this.onMouseOut);\n        on(this.tooltip, 'mouseout', this.onMouseOut);\n        break;\n    }\n  },\n\n  methods: {\n    doToggle() {\n      if (!this.forceShow) {\n        this.showPopper = !this.showPopper;\n      }\n    },\n\n    doShow() {\n      this.showPopper = true;\n    },\n\n    doClose() {\n      this.showPopper = false;\n    },\n\n    doDestroy() {\n      if (this.showPopper) {\n        return;\n      }\n\n      if (this.popperJS) {\n        this.popperJS.destroy();\n        this.popperJS = null;\n      }\n\n      if (this.appendedToBody) {\n        this.appendedToBody = false;\n        document.body.removeChild(this.tooltip.parentElement);\n      }\n    },\n\n    createPopper() {\n      this.$nextTick(() => {\n        if (this.visibleArrow) {\n          this.appendArrow(this.tooltip);\n        }\n\n        if (this.appendToBody && !this.appendedToBody) {\n          this.appendedToBody = true;\n          document.body.appendChild(this.tooltip.parentElement);\n        }\n\n        if (this.popperJS && this.popperJS.destroy) {\n          this.popperJS.destroy();\n        }\n\n        if (this.boundariesSelector) {\n          const boundariesElement = document.querySelector(this.boundariesSelector);\n\n          if (boundariesElement) {\n            this.popperOptions.modifiers = Object.assign({}, this.popperOptions.modifiers);\n            this.popperOptions.modifiers.preventOverflow = Object.assign({}, this.popperOptions.modifiers.preventOverflow);\n            this.popperOptions.modifiers.preventOverflow.boundariesElement = boundariesElement;\n          }\n        }\n\n        this.popperOptions.onCreate = () => {\n          this.$emit('created', this);\n          this.$nextTick(this.updatePopper);\n        };\n\n        this.popperJS = new Popper(this.referenceElm, this.tooltip, this.popperOptions);\n      });\n    },\n\n    destroyPopper() {\n      off(this.referenceElm, 'click', this.doToggle);\n      off(this.referenceElm, 'mouseup', this.doClose);\n      off(this.referenceElm, 'mousedown', this.doShow);\n      off(this.referenceElm, 'focus', this.doShow);\n      off(this.referenceElm, 'blur', this.doClose);\n      off(this.referenceElm, 'mouseout', this.onMouseOut);\n      off(this.referenceElm, 'mouseover', this.onMouseOver);\n      off(document, 'click', this.handleDocumentClick);\n\n      this.showPopper = false;\n      this.doDestroy();\n    },\n\n    appendArrow(element) {\n      if (this.appendedArrow) {\n        return;\n      }\n\n      this.appendedArrow = true;\n\n      const arrow = document.createElement('div');\n      arrow.setAttribute('x-arrow', '');\n      arrow.className = 'tooltip_arrow';\n      element.appendChild(arrow);\n    },\n\n    updatePopper() {\n      this.popperJS ? this.popperJS.scheduleUpdate() : this.createPopper();\n    },\n\n    onMouseOver() {\n      this.showPopper = true;\n      clearTimeout(this._timer);\n    },\n\n    onMouseOut() {\n      this._timer = setTimeout(() => {\n        this.showPopper = false;\n      }, this.delayOnMouseOut);\n    },\n\n    handleDocumentClick(e) {\n      if (!this.$el || !this.referenceElm ||\n        this.$el.contains(e.target) ||\n        this.referenceElm.contains(e.target) ||\n        !this.tooltip || this.tooltip.contains(e.target)\n      ) {\n        return;\n      }\n\n      this.$emit('documentClick');\n\n      if (this.forceShow) {\n        return;\n      }\n\n      this.showPopper = false;\n    }\n  },\n\n  destroyed() {\n    this.destroyPopper();\n  }\n};\n\nexport default Tooltip;\nexport { Tooltip as mdbTooltip };\n",{"version":3,"sources":["Tooltip.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;AAefile":"Tooltip.vue","sourceRoot":"node_modules/mdbvue/src/components/Advanced","sourcesContent":["<template>\n  <span>\n    <transition @after-leave=\"doDestroy\">\n      <span ref=\"popper\" :class=\"{show:!disabled && showPopper}\">\n        <div class=\"tooltip\" v-if=\"$slots.tip\" ref=\"tooltip\">\n          <slot name=\"tip\"></slot>\n        </div>\n        <slot></slot>\n      </span>\n    </transition>\n    <slot name=\"reference\"></slot>\n  </span>\n</template>\n\n<script>\n  import Popper from 'popper.js';\n\n  const on = function(element, event, handler) {\n    if (element && event && handler) {\n      document.addEventListener ? element.addEventListener(event, handler, false) : element.attachEvent('on' + event, handler);\n    }\n  };\n\n  const off = function(element, event, handler) {\n    if (element && event) {\n      document.removeEventListener ? element.removeEventListener(event, handler, false) : element.detachEvent('on' + event, handler);\n    }\n  };\n\n  const Tooltip = {\n    props: {\n      trigger: {\n        type: String,\n        default: 'hover',\n        validator: value => ['click', 'hover'].indexOf(value) > -1\n      },\n      delayOnMouseOut: {\n        type: Number,\n        default: 10,\n      },\n      disabled: {\n        type: Boolean,\n        default: false\n      },\n      content: String,\n      enterActiveClass: String,\n      leaveActiveClass: String,\n      boundariesSelector: String,\n      reference: {},\n      forceShow: {\n        type: Boolean,\n        default: false\n      },\n      appendToBody: {\n        type: Boolean,\n        default: false\n      },\n      visibleArrow: {\n        type: Boolean,\n        default: true\n      },\n      transition: {\n        type: String,\n        default: ''\n      },\n      options: {\n        type: Object,\n        default() {\n          return {};\n        }\n      },\n    },\n\n    data() {\n      return {\n        referenceElm: null,\n        popperJS: null,\n        showPopper: false,\n        currentPlacement: '',\n        popperOptions: {\n          placement: 'bottom',\n          gpuAcceleration: false\n        }\n      };\n    },\n\n    watch: {\n      showPopper(value) {\n        if (value) {\n          this.$emit('show');\n          this.updatePopper();\n        } else {\n          this.$emit('hide');\n        }\n      },\n\n      forceShow: {\n        handler(value) {\n          this[value ? 'doShow' : 'doClose']();\n        },\n        immediate: true\n      }\n    },\n\n    created() {\n      this.appendedArrow = false;\n      this.appendedToBody = false;\n      this.popperOptions = Object.assign(this.popperOptions, this.options);\n    },\n\n    mounted() {\n      this.referenceElm = this.reference || this.$slots.reference[0].elm;\n      this.tooltip =  this.$refs.tooltip || this.$slots.default[0].elm;\n\n      switch (this.trigger) {\n        case 'click':\n          on(this.referenceElm, 'click', this.doToggle);\n          on(document, 'click', this.handleDocumentClick);\n          break;\n        case 'hover':\n          on(this.referenceElm, 'mouseover', this.onMouseOver);\n          on(this.tooltip, 'mouseover', this.onMouseOver);\n          on(this.referenceElm, 'mouseout', this.onMouseOut);\n          on(this.tooltip, 'mouseout', this.onMouseOut);\n          break;\n      }\n    },\n\n    methods: {\n      doToggle() {\n        if (!this.forceShow) {\n          this.showPopper = !this.showPopper;\n        }\n      },\n\n      doShow() {\n        this.showPopper = true;\n      },\n\n      doClose() {\n        this.showPopper = false;\n      },\n\n      doDestroy() {\n        if (this.showPopper) {\n          return;\n        }\n\n        if (this.popperJS) {\n          this.popperJS.destroy();\n          this.popperJS = null;\n        }\n\n        if (this.appendedToBody) {\n          this.appendedToBody = false;\n          document.body.removeChild(this.tooltip.parentElement);\n        }\n      },\n\n      createPopper() {\n        this.$nextTick(() => {\n          if (this.visibleArrow) {\n            this.appendArrow(this.tooltip);\n          }\n\n          if (this.appendToBody && !this.appendedToBody) {\n            this.appendedToBody = true;\n            document.body.appendChild(this.tooltip.parentElement);\n          }\n\n          if (this.popperJS && this.popperJS.destroy) {\n            this.popperJS.destroy();\n          }\n\n          if (this.boundariesSelector) {\n            const boundariesElement = document.querySelector(this.boundariesSelector);\n\n            if (boundariesElement) {\n              this.popperOptions.modifiers = Object.assign({}, this.popperOptions.modifiers);\n              this.popperOptions.modifiers.preventOverflow = Object.assign({}, this.popperOptions.modifiers.preventOverflow);\n              this.popperOptions.modifiers.preventOverflow.boundariesElement = boundariesElement;\n            }\n          }\n\n          this.popperOptions.onCreate = () => {\n            this.$emit('created', this);\n            this.$nextTick(this.updatePopper);\n          };\n\n          this.popperJS = new Popper(this.referenceElm, this.tooltip, this.popperOptions);\n        });\n      },\n\n      destroyPopper() {\n        off(this.referenceElm, 'click', this.doToggle);\n        off(this.referenceElm, 'mouseup', this.doClose);\n        off(this.referenceElm, 'mousedown', this.doShow);\n        off(this.referenceElm, 'focus', this.doShow);\n        off(this.referenceElm, 'blur', this.doClose);\n        off(this.referenceElm, 'mouseout', this.onMouseOut);\n        off(this.referenceElm, 'mouseover', this.onMouseOver);\n        off(document, 'click', this.handleDocumentClick);\n\n        this.showPopper = false;\n        this.doDestroy();\n      },\n\n      appendArrow(element) {\n        if (this.appendedArrow) {\n          return;\n        }\n\n        this.appendedArrow = true;\n\n        const arrow = document.createElement('div');\n        arrow.setAttribute('x-arrow', '');\n        arrow.className = 'tooltip_arrow';\n        element.appendChild(arrow);\n      },\n\n      updatePopper() {\n        this.popperJS ? this.popperJS.scheduleUpdate() : this.createPopper();\n      },\n\n      onMouseOver() {\n        this.showPopper = true;\n        clearTimeout(this._timer);\n      },\n\n      onMouseOut() {\n        this._timer = setTimeout(() => {\n          this.showPopper = false;\n        }, this.delayOnMouseOut);\n      },\n\n      handleDocumentClick(e) {\n        if (!this.$el || !this.referenceElm ||\n          this.$el.contains(e.target) ||\n          this.referenceElm.contains(e.target) ||\n          !this.tooltip || this.tooltip.contains(e.target)\n        ) {\n          return;\n        }\n\n        this.$emit('documentClick');\n\n        if (this.forceShow) {\n          return;\n        }\n\n        this.showPopper = false;\n      }\n    },\n\n    destroyed() {\n      this.destroyPopper();\n    }\n  };\n\n  export default Tooltip;\n  export { Tooltip as mdbTooltip };\n</script>\n\n<style>\n  .tooltip {\n    width: auto;\n    background-color: rgba(0, 0, 0, 0.85);\n    color: rgba(242, 239, 239, 0.95);\n    text-align: center;\n    padding: 0.24em 0.5em;\n    display: inline-block;\n    border-radius: 3px;\n    position: absolute;\n    font-size: 0.83em;\n    font-weight: normal;\n    z-index: 200000;\n    opacity: 0;\n    transition: opacity 0.2s, visibility 0.2s;\n    visibility: hidden;\n  }\n\n  .show > .tooltip {\n    opacity: 1;\n    visibility: visible;\n  }\n\n  .tooltip .tooltip_arrow {\n    width: 0;\n    height: 0;\n    border-style: solid;\n    position: absolute;\n    margin: 5px;\n  }\n  .tooltip[x-placement^=\"top\"] {\n    margin-bottom: 5px;\n  }\n  .tooltip[x-placement^=\"top\"] .tooltip_arrow {\n    border-width: 5px 5px 0 5px;\n    border-color:  rgba(0, 0, 0, 0.85) transparent transparent transparent;\n    bottom: -5px;\n    left: calc(50% - 5px);\n    margin-top: 0;\n    margin-bottom: 0;\n  }\n  .tooltip[x-placement^=\"bottom\"] {\n    margin-top: 5px;\n  }\n  .tooltip[x-placement^=\"bottom\"] .tooltip_arrow {\n    border-width: 0 5px 5px 5px;\n    border-color: transparent transparent rgba(0, 0, 0, 0.85) transparent;\n    top: -5px;\n    left: calc(50% - 5px);\n    margin-top: 0;\n    margin-bottom: 0;\n  }\n  .tooltip[x-placement^=\"right\"] {\n    margin-left: 5px;\n  }\n  .tooltip[x-placement^=\"right\"] .tooltip_arrow {\n    border-width: 5px 5px 5px 0;\n    border-color: transparent rgba(0, 0, 0, 0.85) transparent transparent;\n    left: -5px;\n    top: calc(50% - 5px);\n    margin-left: 0;\n    margin-right: 0;\n  }\n  .tooltip[x-placement^=\"left\"] {\n    margin-right: 5px;\n  }\n  .tooltip[x-placement^=\"left\"] .tooltip_arrow {\n    border-width: 5px 0 5px 5px;\n    border-color: transparent transparent transparent rgba(0, 0, 0, 0.85);\n    right: -5px;\n    top: calc(50% - 5px);\n    margin-left: 0;\n    margin-right: 0;\n  }\n</style>\n"]}]}